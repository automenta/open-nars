#summary One-sentence summary of this page.

= Introduction =

Beginning with OpenNARS 1.6.1, there is the possibility to code plugins for the system, which can be activated and deactivated at runtime, also they can be added multiple times with different parameters, similar like in a effects program for design. Also the plugins are entirely independent from the plugin manager (they don't need to register themselves), since the plugin manager queries the plugins and its parameters with reflection. The reason why we allow such plugins is that some narrow AI plugins might be useful for certain domains. 

There are some properties plugins have to fullfill in order to be valid:

  * They are not allowed to violate NAL, if plugins generate NAL statements by other NAL statements, the plugin has to apply valid NAL rules and manage the stamp correctly. For example when a planner-plugin helps the general control mechanism to generate a plan to fullfill a desired goal, the resulting plan will have the truth value same as the general control mechanism would have created with temporal induction and the temporal chaining rule.

  * If they need the system to actively call an operator in order to use the plugin (most plugins are that way), they need to provide the system with the needed usage desire evidence when loaded, the system won't use what it doesn't know that it exists. A example for a possible wiki-ask-plugin:

{{{
<(&/,(^wonder,$sth),(^pluginAskWiki,$sth)) =/> <nars --> knows>>.
<nars --> knows>! 
}}}

= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages