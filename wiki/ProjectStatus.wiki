#summary The current status and the plan for the near future of the project.
#labels Phase-Requirements

= Current situation =

The main Open-NARS project (under http://code.google.com/p/open-nars/source/browse/#svn/trunk/nars) has been updated to version 1.2.0 on August 15, 2009. This version has implemented most contents of the design as described in [http://www.springer.com/computer/artificial/book/978-1-4020-5044-2 Rigid Flexibility: The Logic of Intelligence], with the logic part updated as specified in [http://nars.wang.googlepages.com/wang.NAL.pdf Non-Axiomatic Logic (NAL) Specification].

= Future tasks =

As far as the main project is concerned, there are several major tasks in the near future. Interested people are welcome to participate.

== A. The Logic Part ==

The _logic part_ of the system includes the Narsese language, the semantic theory, and the inference rules. Generally speaking, the task here is to provide reasonable solutions with insufficient knowledge. The current design is mostly described in [http://nars.wang.googlepages.com/wang.NAL.pdf Non-Axiomatic Logic (NAL) Specification], and implemented in Open-NARS 1.2.0.

What remaining to be done for this part include:
  # To solve the remaining issues in design and implementation
  # To go through examples in various domains to check the strength and limitation in the expression and inference power of NARS, like what the [http://code.google.com/p/open-nars/source/browse/#svn/trunk/nars-dist/Examples examples] do.

== B. The Control Part ==

The _control part_ of the system includes memory management and premise selection in each inference step. Generally speaking, the task here is to efficiently allocate the system's time-space resources when they are insufficient with respect to the tasks to be processed. The current design and implementation have realized the basic principles introduced in [http://www.springer.com/computer/artificial/book/978-1-4020-5044-2 Rigid Flexibility: The Logic of Intelligence], though in a very rough way.

With the logic part mostly finished, the control part will be refined, along the following path:
  # To identify all the _control points_ where the system needs to allocate resources. The major control points include the selection of concept, task, and belief in each inference cycle, and there are also a large number of minor control points.
  # At each control point, to identify the relevant factors, and measure them numerically, usually by a real number in [0, 1].
  # To analyze the relations that should be kept among these factors, according to theories in related fields, such as psychology and economy.
  # To implement the relations as complex functions among related measurements, using the basic functions defined in http://code.google.com/p/open-nars/source/browse/trunk/nars/inference/UtilityFunctions.java

== C. Complete Re-implementation ==

When the conceptual design of both the logic part and the control part are mature enough, it may become necessary to completely design and implement the system from scratch, since the current design is the result of a long evolution process, so is not optimal according to the new understanding about how the system should work. Beside following the guideline of software engineering more closely, the new implementation should also address the following requirements not covered in the current design:
  * Using NARS as a library by other systems;
  * Following a more _declarative_ format when coding the grammar rules of Narsese and the inference rules of NAL;
  * Allowing NARS to directly invoke various types of hardware and software as its "sensorimotor" mechanism, using the existing mechanism in http://code.google.com/p/open-nars/source/browse/#svn/trunk/nars/operation ;
  * Loading (and saving) the memory from (and to) permanent storage in file or database;
  * Communicating with human user with an enhanced GUI.

Some considerations in this direction can be found in AbstractDesignProposal and Modules.

== D. Knowledge Acquisition ==

Even after both the logic and control parts of the system are completed, the system still won't have practical application until it is given proper knowledge to start with. As discussed in [http://nars.wang.googlepages.com/wang.roadmap.pdf From NARS to a Thinking Machine], several channels will be explored in coordination:
  * Getting knowledge from existing knowledge-base or other sources (such as semantic web), wherever approximate mapping from other knowledge format into Narsese is possible.
  * Teaching NARS _natural languages_, so that it can get knowledge encoded in those languages. The system will learn linguistic knowledge in the same way as it learn other types of knowledge, more or less as suggested by cognitive linguistics.
  * Directly get knowledge from its _environment_, as defined by the sensorimotor mechanism of the system.

In all of the above channels, the system will be trained according to an _education theory_, which specifies the type, order, and pace of input tasks, so as to get a desired belief structure and goal structure of the system.