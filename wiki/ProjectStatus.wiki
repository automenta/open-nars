#summary The current status and the plan for the near future of the project.
#labels Phase-Requirements

= Current Situation =

The main Open-NARS project (under http://code.google.com/p/open-nars/source/browse/#svn/trunk/nars_core_java and http://code.google.com/p/open-nars/source/browse/#svn/trunk/nars_gui) has been updated to [https://drive.google.com/folderview?id=0B8Z4Yige07tBUk5LSUtxSGY0eVk&usp=sharing version 1.5.7] in August 2014. This version implementes NAL-1 to NAL-6 as described in [http://www.worldscientific.com/worldscibooks/10.1142/8665 Non-Axiomatic Logic: A Model of Intelligent Reasoning]. This version is a major refactoring of the previous versions with issue resolutions and performance improvements done by SeH, Patrick, and Pei. This version also realizes some ideas previously suggested by Joe Geldart, Jeff Thompson, and Jean-Marc Vanel.

The [https://github.com/opennars/opennars new version] under development is hosted in GitHub. This version includes NAL-7, NAL-8, and NAL-9, as described in [http://www.worldscientific.com/worldscibooks/10.1142/8665 Non-Axiomatic Logic: A Model of Intelligent Reasoning], so will provide all major functions of NAL for the first time. The design is briefly described in OpenNarsOneDotSix.

= Future Tasks =

In the near future, there are the following tasks to be accomplished, probably in parallel.

=== Conceptual design ===

Though the major design decisions have been implemented, there are still many remaining conceptual issues. Some of them are listed in OpenNarsOneDotSix, and there will surely more to be found in the testing process.

The conceptual issues usually cannot be resolved by coding considerations, but should be addressed in ways that are consistent with the overall design of NARS.

In the near future, the focus of conceptual design should be on the logic part (i.e., Narsese and NAL). The details of the control part (memory structure and resource allocation) will wait until the logic part is relatively stable.

=== Working examples ===

As before, there will be two types of testing cases, single-step and multiple-step. 

The single-step test cases of NAL 7-9 need to check every types of inference one-by-one, with easily understandable examples. The previous examples for NAL-7 and NAL-8 need to be checked for validity, and examples for NAL-9 should be constructed.

Even the existing single-step examples of NAL 1-6 needs to be reviewed and revised, to make sure they all work with the new version.

The single-step examples will be turned into unit tests, though the plain text files still need to be maintained, since they work better for demonstration purpose.

The multiple-step examples are designed mainly for demonstration, that is, to show how the system works in various representative situations. For this purpose, their intermediate results also make sense. The current file needs to be revised (some desired intermediate results do not appear), as well as extended to cover the new functions. It may be better to split the current file into multiple files, each contains a single example. All these cases should be collected in a folder.

After the examples are updated, the wiki pages about them should be updated accordingly.

=== New releases ===

Version 1.6.0 can be released after the working examples covers all levels, and the system runs on the examples without throwing exception. It is not necessary to wait for all the conceptual issues to be resolved.

Versions 1.6.n will be released after major revisions.

=== Application tests ===

More complicated testing can be domain-specific, as shown by the previous [http://www.cis.temple.edu/~pwang/demos.html Testing Cases] and the [http://www.cis.temple.edu/~pwang/Publication/NLP.pdf experiment on NLP].

The functions of version 1.5.7 (i.e., NAL 1-6) is ready for practical application, though the control part may need some customization. Functions in 1.6.0 will not be ready for application soon, though some exploratory testing can be interesting. 

To carry out such an application test, it is important to remember that it cannot be done by simply dump a large number of tasks into the system then let it run. It is more efficient to do it in a step-by-step manner, and to follow the order of (1) Narsese (i.e., make sure all the problems and solutions can be expressed), (2) NAL (i.e., make sure all the desired steps are supported by existing rules), and (3) NARS (i.e., make sure the complete process can be carried out when given proper experience).

=== Software development ===

Beside the conceptual issues, developmental tasks include:
  * Debugging
  * Documentation (both javadoc and wiki)
  * Refactoring (some ad hoc code should be merged into the overall structure)
  * Database connection (as explained in DataAndKnowledgeBases)

In the near future, it is still too early to spend time on detailed parameter tuning or performance improvements.